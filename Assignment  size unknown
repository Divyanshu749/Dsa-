We have been given a sorted array/list whose size is known. One approach could be to use linear search but here we have been given that the list/array is sorted than we should take that thing into account. Usually we use binary search for searching an element in a sorted array/list in which we declare two variables start and end and then initialize them with initial values as 0 and (length of the array/list) respectively and check whether element at mid= (start+end)/2 is greater than or smaller than the element to be founded. If it is greater than value at mid, then we change the value of start=mid and if the element is less than value at mid then end =mid. This is executed using while loop with condition start<=end.
 Now as size is unknown we don’t have an apt value for end. So in this case we can take start=0 and end=(start+1)*2. Then check whether the value at end is less than or greater than value to be founded. If it is less then that value, we can update the value as follows:- 
start=end 
end= end*2
 if it is small
 end=(end+start)/2 
now here we can see we can encounter one runtime error which is arrayoutofboundedsexception which need to seen. So, to handle it we can keep the while loop in try block and in the catch block which would be executed once the exception is raised, the catch block will be used to do linear search for the element to be founded with the starting value as start. Now this linear search will indeed be contained in a try block and in the corresponding catch block of this try block we will print the message “Element not present” So by this approach we could find the element without using its size, or when the size is known.
